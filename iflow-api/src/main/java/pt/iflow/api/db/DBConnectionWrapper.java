package pt.iflow.api.db;

import java.io.InputStream;
import java.io.OutputStream;
import java.io.Reader;
import java.io.Writer;
import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

import javax.xml.transform.Result;
import javax.xml.transform.Source;

/**
 * Class to wrap an sql connection for an iFlow "transaction"
 * Only methods to get statements are allowed. Connection management 
 * must be done outside this object. Commit and rollback methods do NOTHING
 * 
 * @author infosistema
 *
 */
public class DBConnectionWrapper implements Connection {

  private Connection conn;
  
  public DBConnectionWrapper(Connection conn) {
    
    try {
      if (conn.getAutoCommit() == true) {
        throw new IllegalArgumentException("Connection's auto commit is set to true. Must be set to false.");
      }
    } catch (SQLException e) {
      throw new IllegalArgumentException(e);
    }
    
    this.conn = conn;
  }

  public Statement createStatement() throws SQLException {
    return conn.createStatement();
  }

  public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
    return conn.createStatement(resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
    return conn.createStatement(resultSetType, resultSetConcurrency);
  }

  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
      throws SQLException {
    return conn.prepareCall(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    return conn.prepareCall(sql, resultSetType, resultSetConcurrency);
  }

  public CallableStatement prepareCall(String sql) throws SQLException {
    return conn.prepareCall(sql);
  }

  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability)
      throws SQLException {
    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability);
  }

  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
    return conn.prepareStatement(sql, resultSetType, resultSetConcurrency);
  }

  public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
    return conn.prepareStatement(sql, autoGeneratedKeys);
  }

  public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
    return conn.prepareStatement(sql, columnIndexes);
  }

  public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
    return conn.prepareStatement(sql, columnNames);
  }

  public PreparedStatement prepareStatement(String sql) throws SQLException {
    return conn.prepareStatement(sql);
  }

  public void clearWarnings() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void close() throws SQLException {
    // ignored...
    return;
  }

  public void commit() throws SQLException {
    // ignored...
    return;
  }

  public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Blob createBlob() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Clob createClob() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public boolean getAutoCommit() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public String getCatalog() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Properties getClientInfo() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public String getClientInfo(String name) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public int getHoldability() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public DatabaseMetaData getMetaData() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public int getTransactionIsolation() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Map<String, Class<?>> getTypeMap() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public SQLWarning getWarnings() throws SQLException {
    return conn.getWarnings();
  }

  public boolean isClosed() throws SQLException {
    return conn.isClosed();
  }

  public boolean isReadOnly() throws SQLException {
    return conn.isReadOnly();
  }

  public String nativeSQL(String sql) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void releaseSavepoint(Savepoint savepoint) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void rollback() throws SQLException {
    // ignored...
    return;
  }

  public void rollback(Savepoint savepoint) throws SQLException {
    // ignored...
    return;
  }

  public void setAutoCommit(boolean autoCommit) throws SQLException {
    // ignored...
    return;
  }

  public void setCatalog(String catalog) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void setHoldability(int holdability) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void setReadOnly(boolean readOnly) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Savepoint setSavepoint() throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public Savepoint setSavepoint(String name) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void setTransactionIsolation(int level) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public void setTypeMap(Map<String, Class<?>> map) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public boolean isWrapperFor(Class<?> arg0) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }

  public <T> T unwrap(Class<T> arg0) throws SQLException {
    throw new UnsupportedOperationException("Not supported in connection wrapper");
  }
 
  public void setClientInfo(Properties properties) {
	  //TODO not needed
  }

  public void setClientInfo(String str1, String str2) {
	  //TODO not needed
  }
  
  public boolean isValid(int int1) {
	  //TODO not needed
	  return true;
  }
  
  public SQLXML createSQLXML() {
	  //TODO not needed
	  return new SQLXML() {
		
		public void setString(String value) throws SQLException {
			// TODO Auto-generated method stub
			
		}
		
		public <T extends Result> T setResult(Class<T> resultClass)
				throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public Writer setCharacterStream() throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public OutputStream setBinaryStream() throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public String getString() throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public <T extends Source> T getSource(Class<T> sourceClass)
				throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public Reader getCharacterStream() throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public InputStream getBinaryStream() throws SQLException {
			// TODO Auto-generated method stub
			return null;
		}
		
		public void free() throws SQLException {
			// TODO Auto-generated method stub
			
		}
	};
  }

  public NClob createNClob() throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

  public void abort(Executor executor) throws SQLException {
    // TODO Auto-generated method stub

  }

  public int getNetworkTimeout() throws SQLException {
    // TODO Auto-generated method stub
    return 0;
  }

  public String getSchema() throws SQLException {
    // TODO Auto-generated method stub
    return null;
  }

  public void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
    // TODO Auto-generated method stub

  }

  public void setSchema(String schema) throws SQLException {
    // TODO Auto-generated method stub

  }
}
