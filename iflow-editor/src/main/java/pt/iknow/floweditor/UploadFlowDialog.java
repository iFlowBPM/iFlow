/*
 * UploadFlowDialog.java
 *
 * Created on February 7, 2008, 10:39 AM
 */

package pt.iknow.floweditor;

import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import pt.iflow.api.utils.FlowInfo;
import pt.iknow.floweditor.messages.Messages;
import pt.iknow.iflow.RepositoryClient;
import pt.iknow.iflow.RepositoryStatusListener;
import pt.iknow.utils.StringUtilities;

/**
 * 
 * @author oscar
 */
public class UploadFlowDialog extends javax.swing.JDialog {

  /**
   * 
   */
  private static final long serialVersionUID = -4622717706030225540L;
  
  private boolean isFlow = true;
  private String sub;

  
  private Desenho d;
  
  private javax.swing.JButton okButton;
  private javax.swing.JButton cancelButton;
  private javax.swing.JButton closeButton;
  private javax.swing.JProgressBar loadingBar;
  private javax.swing.JLabel infoLabel;
  private javax.swing.JLabel warningLabel;
  private javax.swing.JLabel commentLabel;
  private javax.swing.JPanel commentPanel;
  private javax.swing.JCheckBox commitCheckBox;
  private javax.swing.JTextArea commentTextArea;
  private javax.swing.JScrollPane commentScrollPane;

  /** Creates new form UploadFlowDialog */
  protected UploadFlowDialog(Desenho d, boolean isFlow) {
    super(Janela.getInstance(), true);
    this.d = d;
    this.isFlow = isFlow;
    sub = isFlow?"":"Sub"; //$NON-NLS-1$ //$NON-NLS-2$
    initComponents();
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  private void initComponents() {
    
    
    java.awt.GridBagConstraints gridBagConstraints;

    loadingBar = new javax.swing.JProgressBar();
    infoLabel = new javax.swing.JLabel();
    warningLabel = new javax.swing.JLabel();
    commentPanel = new javax.swing.JPanel();
    commentLabel = new javax.swing.JLabel();
    commentScrollPane = new javax.swing.JScrollPane();
    commentTextArea = new javax.swing.JTextArea();
    commitCheckBox = new javax.swing.JCheckBox();
    javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
    okButton = new javax.swing.JButton();
    cancelButton = new javax.swing.JButton();
    closeButton = new javax.swing.JButton();

    setLayout(new java.awt.GridBagLayout());

    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        closeDialog();
      }
    });
    
    setTitle(Messages.getString("UploadFlowDialog."+sub+"Flow.title")); //$NON-NLS-1$ //$NON-NLS-2$

    infoLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.info")); //$NON-NLS-1$ //$NON-NLS-2$
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(infoLabel, gridBagConstraints);

    // warningLabel.setText("Aviso! O fluxo está online! (aparece ou não)");
    warningLabel.setIcon(new ImageIcon(Janela.getInstance().createImage("warning.png", false, false))); //$NON-NLS-1$
    warningLabel.setFont(warningLabel.getFont().deriveFont(Font.BOLD));
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(warningLabel, gridBagConstraints);

    commentPanel.setLayout(new java.awt.BorderLayout());

    commentLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.comment")); //$NON-NLS-1$ //$NON-NLS-2$
    commentPanel.add(commentLabel, java.awt.BorderLayout.NORTH);

    commentTextArea.setColumns(20);
    commentTextArea.setRows(5);
    commentScrollPane.setViewportView(commentTextArea);

    commentPanel.add(commentScrollPane, java.awt.BorderLayout.CENTER);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(commentPanel, gridBagConstraints);

    commitCheckBox.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.versionButton")); //$NON-NLS-1$ //$NON-NLS-2$
    commitCheckBox.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        radioAction();
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(commitCheckBox, gridBagConstraints);

    jPanel2.setLayout(new java.awt.GridBagLayout());

    okButton.setText(Mesg.OK);
    okButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        okAction();
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
    jPanel2.add(okButton, gridBagConstraints);

    cancelButton.setText(Mesg.Cancelar);
    cancelButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        closeDialog();
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 1;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
    jPanel2.add(cancelButton, gridBagConstraints);

    closeButton.setText(Mesg.Close);
    closeButton.setVisible(false);
    closeButton.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        closeDialog();
      }
    });
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 0;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 3);
    jPanel2.add(closeButton, gridBagConstraints);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.insets = new java.awt.Insets(3, 3, 3, 3);
    add(jPanel2, gridBagConstraints);

    loadingBar.setVisible(false);
    loadingBar.setStringPainted(true);

    commentPanel.add(loadingBar, BorderLayout.SOUTH);
    
    getRootPane().setDefaultButton(okButton);
    radioAction();

    warningLabel.setVisible(false);
    if(isFlow) {
      RepositoryClient rep = Janela.getInstance().getRepository();
      if(!rep.checkConnection()) {
        FlowEditor.log("iFlow is unavailable...."); //$NON-NLS-1$
        warningLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.iflowUnavailable")); //$NON-NLS-1$ //$NON-NLS-2$
        warningLabel.setVisible(true);
        commitCheckBox.setEnabled(false);
      } else if (rep.hasExtendedAPI()) {
        FlowInfo finfo = rep.getFlowInfo(d.getFlowId());
        if (finfo != null && finfo.isOnline()) {
          FlowEditor.log("flow is online..."); //$NON-NLS-1$
          warningLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.flowOnline")); //$NON-NLS-1$ //$NON-NLS-2$
          warningLabel.setVisible(true);
        }
      }
    }
    pack();
    setSize(400, 250);
    setLocationRelativeTo(null);
  }

  private void okAction() {
    String comment = commentTextArea.getText();
    if(commitCheckBox.isSelected() && StringUtilities.isEmpty(comment)) {
      FlowEditor.log("Empty comment"); //$NON-NLS-1$
      int r = JOptionPane.showConfirmDialog(this, Messages.getString("UploadFlowDialog."+sub+"Flow.nocomment")); //$NON-NLS-1$ //$NON-NLS-2$
      if(r != JOptionPane.OK_OPTION) return;
    }
    
    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    commentLabel.setVisible(false);
    commentScrollPane.setVisible(false);
    
    loadingBar.setVisible(true);
    loadingBar.setIndeterminate(true);
    loadingBar.setString(Messages.getString("UploadFlowDialog."+sub+"Flow.pleaseWait")); //$NON-NLS-1$ //$NON-NLS-2$
    
    okButton.setEnabled(false);
    cancelButton.setEnabled(false);
    Thread t = new Thread(new Corredor());
    t.start();
  }
  
  /** Closes the dialog */
  private void closeDialog() {
    FlowEditor.log("Closing dialog"); //$NON-NLS-1$
    setVisible(false);
    dispose();
  }

  
  private void radioAction() {
    commentLabel.setVisible(commitCheckBox.isSelected());
    commentScrollPane.setVisible(commitCheckBox.isSelected());
  }
  

  public static void openDialog(Desenho d, boolean isFlow) {
    new UploadFlowDialog(d, isFlow).setVisible(true);
  }
  
  private class Corredor implements Runnable {
    public void run() {
      RepositoryStatusListener listener = new RepositoryStatusListener() {
        long done = 0L;

        public void done(long done) {
          this.done += done;
          loadingBar.setValue((int)this.done);
        }

        public void finish() {
          loadingBar.setIndeterminate(true);
          loadingBar.setString(Messages.getString("UploadFlowDialog."+sub+"Flow.pleaseWait")); //$NON-NLS-1$ //$NON-NLS-2$
        }

        public void start(long start, long total) {
          loadingBar.setValue((int)start);
          loadingBar.setMinimum((int)start);
          loadingBar.setMaximum((int)total);
          loadingBar.setIndeterminate(false);
          loadingBar.setString(null);
          done = start;
        }

      };

      FlowEditor.log("Preparing to upload"); //$NON-NLS-1$
      int t = Janela.getInstance().saveFlow(d, commentTextArea.getText(), isFlow, commitCheckBox.isSelected(), listener);
      FlowEditor.log("Upload complete"); //$NON-NLS-1$
      
      closeButton.setVisible(true);
      okButton.setVisible(false);
      cancelButton.setVisible(false);
      loadingBar.setVisible(false);
      commentLabel.setVisible(false);
      commitCheckBox.setVisible(false);
      commentScrollPane.setVisible(false);
      if(t > 0) {
        warningLabel.setVisible(false);
        infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD, 12));
        infoLabel.setIcon(new ImageIcon(Janela.getInstance().createImage("success.png", false, false))); //$NON-NLS-1$
        infoLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.uploadComplete")); //$NON-NLS-1$ //$NON-NLS-2$
        d.setFlowChanged(false);
      }else if(t==-2){
          warningLabel.setVisible(false);
          infoLabel.setFont(infoLabel.getFont().deriveFont(Font.BOLD, 12));
          infoLabel.setIcon(new ImageIcon(Janela.getInstance().createImage("error.png", false, false))); //$NON-NLS-1$
          infoLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.varConflict")); //$NON-NLS-1$ //$NON-NLS-2$
      }else {
        infoLabel.setVisible(false);
        warningLabel.setText(Messages.getString("UploadFlowDialog."+sub+"Flow.uploadFailed")); //$NON-NLS-1$ //$NON-NLS-2$
      }
      setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }
  }
  
}
